/**
 * ================================================================
 * üß† HERO SERVICE
 *
 * O que √© um Service?
 * - O Service √© a camada que implementa as regras de neg√≥cio da aplica√ß√£o.
 * - Ele processa dados, aplica l√≥gicas, valida√ß√µes e decide como agir.
 *
 * Para que serve?
 * - Centraliza toda a l√≥gica que envolve opera√ß√µes sobre os dados.
 * - Evita colocar regras diretamente nas rotas, deixando o c√≥digo limpo.
 *
 * Como se relaciona com o restante do projeto?
 * - As rotas chamam os m√©todos do Service (ex: criar her√≥i, listar, etc).
 * - O Service chama o Repository para acessar ou manipular os dados.
 *
 * üìå Resumo da arquitetura:
 * routes ‚ûù service ‚ûù repository ‚ûù dados (array ou banco)
 * ================================================================
 */

import { randomUUID } from 'crypto';

import user from '../models/User';
import UserRepository from '../repositories/UserRepository';

class UserService {
  private repository: UserRepository;

  constructor() {
    // Cria uma inst√¢ncia do reposit√≥rio que gerencia os her√≥is
    this.repository = new UserRepository();
  }

  // ========================================
  // CREATE ‚Üí Cria√ß√£o de novo her√≥i
  // ========================================
  /**
   * Cria um novo her√≥i com os dados fornecidos.
   * Aqui √© gerado um ID aleat√≥rio usando a biblioteca crypto,
   * e em seguida o m√©todo 'create' do reposit√≥rio √© chamado
   * para armazenar o her√≥i na fonte de dados (array em mem√≥ria).
   */
  public create(name: string, email: string, passw: string): user {
    const id = randomUUID(); // Gera um ID √∫nico

    const user = this.repository.create({
      id,
      name,
      email,
      passw,
    });

    return user;
  }

  // ========================================
  // READ ‚Üí Leitura de her√≥is
  // ========================================

  // Lista todos os her√≥is existentes
  public listAll(): user[] {
    return this.repository.getAll();
  }

  // Busca um her√≥i espec√≠fico pelo ID
  public findById(id: string): user | undefined {
    return this.repository.getById(id);
  }

  // ========================================
  // UPDATE ‚Üí Atualiza√ß√£o de her√≥i
  // ========================================
  /**
   * Atualiza os dados de um her√≥i existente.
   * Primeiro verifica se o her√≥i com o ID existe.
   * Se existir, chama o m√©todo 'update' do reposit√≥rio
   * para sobrescrever os dados no array.
   * Caso contr√°rio, retorna null.
   */
  public update(id: string, name: string, email: string, passw: string): user | null {
    const existingUser = this.repository.getById(id);

    if (!existingUser) return null;

    return this.repository.update({
      id,
      data: { name, email, passw },
    });
  }

  // ========================================
  // DELETE ‚Üí Remo√ß√£o de her√≥i
  // ========================================
  /**
   * Remove um her√≥i com base no ID.
   * Primeiro encontra o √≠ndice do her√≥i,
   * depois chama o m√©todo 'delete' do reposit√≥rio
   * para remov√™-lo do array.
   */
  public delete(id: string): boolean {
    const index = this.repository.findIndexById(id);

    if (index === -1) return false;

    this.repository.delete(index);
    return true;
  }
}

export default new UserService();
