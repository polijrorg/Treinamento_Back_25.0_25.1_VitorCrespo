/**
 * ================================================================
 * ğŸ§± HERO MODEL
 *
 * O que Ã© um Model?
 * - Um Model (ou modelo) representa a estrutura de um "objeto do mundo real"
 *   que serÃ¡ manipulado dentro da aplicaÃ§Ã£o â€” neste caso, um super-herÃ³i.
 *
 * Para que serve?
 * - Define quais propriedades cada herÃ³i deve ter (id, name, power).
 * - Pode servir como base para o uso futuro com banco de dados (ORMs como Prisma, TypeORM).
 *
 * Como se relaciona com os outros arquivos?
 * - Ã‰ usado pelo Repository para criar e armazenar herÃ³is.
 * - O Service e as rotas manipulam instÃ¢ncias desse modelo.
 *
 * ğŸ“Œ Exemplo de uso:
 * const hero = new Hero('1', 'Batman', 'InteligÃªncia estratÃ©gica');
 *
 * ğŸ“¦ Fluxo de dados:
 * rotas â†’ serviÃ§o â†’ repositÃ³rio â†’ cria instÃ¢ncia do modelo
 * ================================================================
 */

class Hero {
  id: string; // Identificador Ãºnico do herÃ³i
  name: string; // Nome do herÃ³i (ex: Batman)
  power: string; // Poder ou habilidade principal (ex: InteligÃªncia)

  /**
   * Construtor para criar um novo herÃ³i com base nos dados fornecidos
   */
  constructor(id: string, name: string, power: string) {
    this.id = id;
    this.name = name;
    this.power = power;
  }
}

export default Hero;
